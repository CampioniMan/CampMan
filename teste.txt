

var TPontos = function()
{
    var pontos = 0;

    this.getPontos = function()
        {
            return pontos;
        };

    this.SetPontos = function(novoPonto)
        {
            pontos++;
        };
};

var Derived = function()
{
};

Derived.prototype = new TPontos();

function TPontuacao(x2, y2)
{
	this.xis = x2;
	this.ipi = y2;
	this.vale = true;

	this.mudarVale = function(novoVale)
	{
		this.vale = novoVale;
	}
}

function TBuraco(x2, y2, qts, onde)
{
	this.xis = x2;
	this.ipi = y2;

	this.qtasSaidas = qts;
	this.quaisSaidas = new Array();
	this.quaisSaidas = onde;

	this.escolherSaidaRandomica = function(rand)
	{
		 return this.quaisSaidas[Math.floor(rand * this.qtasSaidas)];
	}

	this.temSaidaPara = function(saida)
	{
		for (var aux = 0; aux <= this.qtasSaidas-1; aux++)
		{
			if (this.quaisSaidas[aux] == saida)
			{
				return true;
			}
		}
		return false;
	}
}

function TPersonagemPri(x2, y2)
{ 

	this.xis = x2;
	this.ipi = y2;
	this.vidas = 3;
	this.proxAct = -1; 
	this.atualAct = 3;

	this.alterarAct = function(novoAct)
	{
		this.atualAct = novoAct;
		this.proxAct = -1;
	}

	this.colidiuCom = function(monstro)
	{
		if ((monstro.xis <= this.xis+50 && monstro.xis+50 >= this.xis) && (monstro.ipi <= this.ipi + 50 && monstro.ipi + 50 >= this.ipi))
			return true;
		return false;
	}

	this.renascer = function()
	{
		this.proxAct = -1;
		this.atualAct = 3;
		this.vidas--;
		this.xis = 570;
		this.ipi = 400;
	}

	this.morreu = function()
	{
		return this.vidas == 0;
	}

	this.andar = function()
	{
		if (this.atualAct == 1)
			this.ipi++;
		else
		{
			if (this.atualAct == 2)
				this.xis--;
			else
			{
				if (this.atualAct  == 3)
					this.xis++;
				else
				{
					if (this.atualAct > 3)
						this.atualAct -= 4;
					this.ipi--;
				}
			}
		}
	}

	this.estaEmCimaDe = function(passagem)
	{
		if ((this.xis == passagem.xis) &&
			(this.ipi == passagem.ipi))
		{
			return true;
		}
		else
		{
			return false;
		}
	}
}

function TPersonagemAgr(x2, y2)
{ 

	this.xis = x2;
	this.ipi = y2;
	this.proxAct = 0; 

	this.andar = function()
	{
		if (this.proxAct == 1)
			this.ipi++;
		else
		{
			if (this.proxAct == 2)
				this.xis--;
			else
			{
				if (this.proxAct  == 3)
					this.xis++;
				else
				{
					if (this.proxAct > 3)
						this.proxAct -= 4;
					this.ipi--;    
				}
			}
		}
	}

	this.estaEmCimaDe = function(passagem)
	{
		if ((this.xis == passagem.xis) &&
			(this.ipi == passagem.ipi))
		{
			return true;
		}
		else
		{
			return false;
		}
	}
}

var TCoisas = {

    canvas   : document.getElementById("meuCanvas"),
	nome     : "Noob1",
	sarvo    : 1,
	qtasReiniciar:240,
	coord    : new TPersonagemPri(570, 400),

	pontos   : new Derived(),

	ondePontos : new Array(
		        new TPontuacao(55, 38), 
				new TPontuacao(320,  38),
				new TPontuacao(830, 38),
				new TPontuacao(1088, 38),
		        new TPontuacao(170,  140), 
				new TPontuacao(445,  140),
				new TPontuacao(715,  140),
				new TPontuacao(970,  140),
				new TPontuacao(55,   250),
				new TPontuacao(1088, 250),
				new TPontuacao(320,   344),
				new TPontuacao(830,   344),
				new TPontuacao(445,  400),
				new TPontuacao(715,  400),
				new TPontuacao(55,   450),
				new TPontuacao(1088,   450),
				new TPontuacao(170,   555),
				new TPontuacao(445,   555),
				new TPontuacao(715,   555),
				new TPontuacao(970,   555),
				new TPontuacao(55,   660),
				new TPontuacao(320,   660),
				new TPontuacao(830,   660),
				new TPontuacao(1088,   660)),


	monstros : new Array(new TPersonagemAgr(575, 270),new TPersonagemAgr(575, 270),new TPersonagemAgr(575, 270),
		                 new TPersonagemAgr(575, 270),new TPersonagemAgr(575, 270),new TPersonagemAgr(575, 270)), 
                                 
	buracos  : new Array(new TBuraco(55,   38,  2, new Array(1, 3)),    
						 new TBuraco(320,  38,  3, new Array(1, 2, 3)), 
						 new TBuraco(830,  38,  3, new Array(1, 2, 3)), 
						 new TBuraco(1088, 38,  2, new Array(1, 2)),   

		                 new TBuraco(55,   140, 2, new Array(0, 3)),   
		                 new TBuraco(170,  140, 3, new Array(1, 2, 3)),	
		                 new TBuraco(320,  140, 4, new Array(0, 1, 2, 3)), 
		                 new TBuraco(445,  140, 3, new Array(1, 2, 3)), 
		                 new TBuraco(575,  140, 2, new Array(2, 3)),   
		                 new TBuraco(715,  140, 3, new Array(1, 2, 3)), 
		                 new TBuraco(830,  140, 4, new Array(0, 1, 2, 3)), 
		                 new TBuraco(970,  140, 3, new Array(1, 2, 3)), 
		                 new TBuraco(1088, 140, 2, new Array(0, 2)),   

		                 new TBuraco(55,   250, 2, new Array(1, 3)),  
		                 new TBuraco(170,  250, 2, new Array(0, 2)),    
		                 new TBuraco(970,  250, 2, new Array(0, 3)),   
		                 new TBuraco(1088, 250, 2, new Array(1, 2)),   

		                 new TBuraco(55,   344, 3, new Array(0, 1, 3)),
		                 new TBuraco(320,  344, 3, new Array(0, 1, 2)),
		                 new TBuraco(830,  344, 3, new Array(0, 1, 3)),
		                 new TBuraco(1088, 344, 3, new Array(0, 1, 2)),

	 				     new TBuraco(445,  400, 3, new Array(0, 1, 3)),
		                 new TBuraco(715,  400, 3, new Array(0, 1, 2)), 

		                 new TBuraco(55,   450, 2, new Array(0, 3)),   
		                 new TBuraco(170,  450, 2, new Array(1, 2)),   
		                 new TBuraco(970,  450, 2, new Array(1, 3)),   
		                 new TBuraco(1088, 450, 2, new Array(0, 2)),  

		                 new TBuraco(55,   555, 2, new Array(1, 3)),    
		                 new TBuraco(170,  555, 3, new Array(0, 2, 3)), 
		                 new TBuraco(320,  555, 4, new Array(0, 1, 2, 3)), 
		                 new TBuraco(445,  555, 3, new Array(0, 2, 3)), 
		                 new TBuraco(715,  555, 3, new Array(0, 2, 3)),
		                 new TBuraco(830,  555, 4, new Array(0, 1, 2, 3)), 
		                 new TBuraco(970,  555, 3, new Array(0, 2, 3)), 
		                 new TBuraco(1088, 555, 2, new Array(1, 2)),    

		                 new TBuraco(55,   660, 2, new Array(0, 3)),   
		                 new TBuraco(320,  660, 3, new Array(0, 2, 3)), 
		                 new TBuraco(830,  660, 3, new Array(0, 2, 3)), 
		                 new TBuraco(1088, 660, 2, new Array(0, 2))    
		                 ),

	imgCamp  : document.getElementById("play"),
	imgMon1  : document.getElementById("mon1"),
	imgMon2  : document.getElementById("mon2"),
	imgMon3  : document.getElementById("mon3"),
	imgMon4  : document.getElementById("mon4"),
	imgMon5  : document.getElementById("mon5"),
	imgMon6  : document.getElementById("mon6"),
	imgPa0   : document.getElementById("pa0"),
	imgPa1   : document.getElementById("pa1"),
	imgPa2   : document.getElementById("pa2"),
	imgPa3   : document.getElementById("pa3"),
	imgPan1  : document.getElementById("pan1"),
	imgPt1   : document.getElementById("pt1"),
	js       : document.createElement("script"),

	context  : null,

	colidiuMonstro : function()
	{
		for (var cont1 = 0; cont1 < 6; cont1++) 
		{
			if (this.coord.colidiuCom(this.monstros[cont1]))
			{
				this.coord.renascer();
				return true;
			}
		}
		return false;
	},

	desenharMonstros : function()
	{
		this.context.drawImage(this.imgMon1, this.monstros[0].xis, this.monstros[0].ipi);
		this.context.drawImage(this.imgMon2, this.monstros[1].xis, this.monstros[1].ipi);
		this.context.drawImage(this.imgMon3, this.monstros[2].xis, this.monstros[2].ipi);
		this.context.drawImage(this.imgMon4, this.monstros[3].xis, this.monstros[3].ipi);
		this.context.drawImage(this.imgMon5, this.monstros[4].xis, this.monstros[4].ipi);
		this.context.drawImage(this.imgMon6, this.monstros[5].xis, this.monstros[5].ipi);
	},

	desenharPlayer : function()
	{
		this.context.drawImage(this.imgCamp, this.coord.xis, this.coord.ipi);
	},

	calcularProximaPos : function()
	{	
		for (var indice = 0; indice <= this.buracos.length-1; indice++)
		{
			for (var cont1 = 0; cont1 < 6; cont1++)
			{
				if (this.monstros[cont1].estaEmCimaDe(this.buracos[indice]))
				{
					rand = Math.random();

					auxiliar = this.buracos[indice].escolherSaidaRandomica(rand);

					if (this.ehInverso(auxiliar, this.monstros[cont1].proxAct))
					{
						this.monstros[cont1].proxAct = this.buracos[indice].escolherSaidaRandomica(1-rand);
					}
					else
					{
						this.monstros[cont1].proxAct = auxiliar;
					}
				}
				
			}	
			
			if (this.coord.estaEmCimaDe(this.buracos[indice]) && indice != 8)
			{
				rand = Math.random();
				if (this.coord.proxAct != -1 && this.buracos[indice].temSaidaPara(this.coord.proxAct))
				{
					this.coord.atualAct = this.coord.proxAct;
					this.coord.proxAct = -1;			
				}
				else
				{
					if (!this.buracos[indice].temSaidaPara(this.coord.atualAct)) 
					{
						auxiliar = this.buracos[indice].escolherSaidaRandomica(rand);
					
						if (this.ehInverso(auxiliar, this.coord.atualAct))
							this.coord.alterarAct(this.buracos[indice].escolherSaidaRandomica(1-rand));
						else
						{
							this.coord.alterarAct(auxiliar);	
						}
					}
				}
			}
		}
		this.monstros[0].andar();
		this.monstros[1].andar();
		this.monstros[2].andar();
		this.monstros[3].andar();
		this.monstros[4].andar();
		this.monstros[5].andar();
		this.coord.andar();
	},

	ehInverso : function(i, i2)
	{
		if ((i < 2 && i2 < 2) || (i > 1 && i2 > 1))
			return true;
		return false;
	},

	desenharCabecalho : function()
	{
		this.context.font="20px Georgia";
		this.context.fillText("Pontos: "+this.pontos.getPontos(), 15, 15);
	},

	limparTela : function()
	{
		this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
		this.context.beginPath();
	},

	desenharPontos : function()
	{
		for (var indice = 0; indice <= this.ondePontos.length-1; indice++)
			if (this.ondePontos[indice].vale != false) 
				this.context.drawImage(this.imgPt1, this.ondePontos[indice].xis, this.ondePontos[indice].ipi);
	},

	salvarRecord : function()
	{
		if (this.sarvo == 2)
		{
			this.sarvo++;
			$.ajax({
	            url: 'guliver.php',
	            type: 'POST',
	            data: {
	                "addItem": this.nome,
	                "addItem2": this.pontos.getPontos()
	            },
	            success: function(trenzaum, burro, trem){
	            },
	            error: function(XMLHttpRequest, textStatus, errorThrown)
	            {
	            	
	            }
	        });
		}
	},

	verSePontuou : function()
	{
		for (var indice = 0; indice <= this.ondePontos.length-1; indice++)
			if (this.ondePontos[indice].vale != false) 
				if (this.coord.colidiuCom(this.ondePontos[indice]))
				{
					for (var auxas = 0; auxas < 10; auxas++)
						this.pontos.SetPontos(auxas);
					this.ondePontos[indice].mudarVale(false);
				}
	},

	ganhou : function()
	{
		return this.pontos.getPontos() == this.qtasReiniciar;
	},

	reiniciar : function()
	{
		for (var indice = 0; indice <= this.ondePontos.length-1; indice++)
			this.ondePontos[indice].mudarVale(true);
		for (var cont1 = 0; cont1 < 6; cont1++)
		{
			this.monstros[cont1].xis = 575;
			this.monstros[cont1].ipi = 270;
			this.monstros[cont1].proxAct = 0;
		}
		this.coord.atualAct = 3;
		this.coord.proxAct = -1;
		this.coord.xis = 570;
		this.coord.ipi = 400;
	},

	gameLoop : function()
	{
		TCoisas.limparTela();
		if (!TCoisas.coord.morreu())
		{
			if (!TCoisas.ganhou())
			{
				if (!TCoisas.colidiuMonstro()) 
				{
					TCoisas.calcularProximaPos();

					TCoisas.verSePontuou();
					TCoisas.desenharPontos();
					TCoisas.desenharPlayer();
					TCoisas.desenharMonstros();
					TCoisas.desenharCabecalho();
					TCoisas.trocarSprites();
				}
			}
			else
			{
				TCoisas.reiniciar();
				TCoisas.qtasReiniciar *= 2;
			}
		}
		else
		{
			if (TCoisas.sarvo == 1)
			{
				TCoisas.sarvo++;
				$.ajax({
		            url: 'einstein.php',
		            success: function(trenzaum, burro, trem){
		            	
		            },
		            error: function(XMLHttpRequest, textStatus, errorThrown)
		            {
		            	
		            }
		        });
			}
			TCoisas.salvarRecord();
			document.location.href = "";
		}
	},

	trocarSprites : function()
	{
		if (this.coord.proxAct == -1)
			this.context.drawImage(this.imgPan1, 583, 342);
		else
		{
			if (this.coord.proxAct == 0)
				this.context.drawImage(this.imgPa0, 583, 342);
			else
			{
				if (this.coord.proxAct  == 1)
					this.context.drawImage(this.imgPa1, 583, 342);
				else
				{
					if (this.coord.proxAct == 2)
						this.context.drawImage(this.imgPa2, 583, 342);
					else
					{
						this.context.drawImage(this.imgPa3, 583, 342);
					}
				}
			}
		}
	}
};

window.onload = function()
{
	TCoisas.canvas = document.getElementById("meuCanvas");
	TCoisas.context = TCoisas.canvas.getContext("2d");
	TCoisas.imgCamp = document.getElementById("play"); 
	TCoisas.imgMon1 = document.getElementById("mon1");
	TCoisas.imgMon2 = document.getElementById("mon2");
	TCoisas.imgMon3 = document.getElementById("mon3");
	TCoisas.imgMon4 = document.getElementById("mon4");
	TCoisas.imgMon5 = document.getElementById("mon5");
	TCoisas.imgMon6 = document.getElementById("mon6");
	TCoisas.imgPa0  = document.getElementById("pa0");
	TCoisas.imgPa1  = document.getElementById("pa1");
	TCoisas.imgPa2  = document.getElementById("pa2");
	TCoisas.imgPa3  = document.getElementById("pa3");
	TCoisas.imgPan1 = document.getElementById("pan1");
	TCoisas.imgPt1  = document.getElementById("pt1");
	TCoisas.js = document.createElement("script");

	TCoisas.js.type = "text/javascript";
	TCoisas.js.src = "jquery-1.12.2.min.js";

	document.body.appendChild(TCoisas.js);

    var person = prompt("Digite o seu nome:", "Noob1");

    if (person.indexOf('<') == -1 && person.indexOf('{') == -1  && person.indexOf('\'') == -1  && person.indexOf('"') == -1)
    	TCoisas.nome = person;

	setInterval(TCoisas.gameLoop, 10);
}

window.onkeydown=function(e)
{
	if (e.keyCode == 13)
		alert("Enter - Pause = "+e.keyCode);
	if (e.keyCode == 65)
		TCoisas.coord.proxAct = 2; 
	if (e.keyCode == 87)
		TCoisas.coord.proxAct = 0; 
	if (e.keyCode == 68)
		TCoisas.coord.proxAct = 3;
	if (e.keyCode == 83)
		TCoisas.coord.proxAct = 1; 

	if (TCoisas.ehInverso(TCoisas.coord.proxAct, TCoisas.coord.atualAct))
	{
	    TCoisas.coord.atualAct = TCoisas.coord.proxAct;
	}
}